'Used to validate the phone number
Imports System.Text.RegularExpressions

Public Class clsOrder
    'This class manages all orders by storing their properties
    'allowing for the adding, removal, chaninging, and deleting of orders
    'It also validates any order information


    Private sID As String                       'Hold Order ID
    Private sCustomerName As String             'Hold Customer Name
    Private sPhoneNumber As String              'Hold Customer Phone Number
    Private sDate As String                     'Hold date
    Private sBillingStreet As String            'Hold Billing Street
    Private sBillingCity As String              'Hold Billing City
    Private sBillingState As String             'Hold Billing State
    Private sBillingZipCode As String           'Hold Billing Zipcode
    Private sShippingStreet As String           'Hold Shipping Street
    Private sShippingCity As String             'Hold Shipping City
    Private sShippingState As String            'Hold Shipping State
    Private sShippingZipCode As String          'Hold Shipping Zipcode
    Private sDeliveryOption As String           'Hold Delivery Option
    Private detailsList As ArrayList            'Hold the detail line items as an Arraylist
    Private sError As String                    'Hold any errors generated by this class

    'Tax rate
    Private Const TAX_RATE = 0.07825

    Public Sub New()
        'Set our initial values
        sID = ""
        sCustomerName = ""
        sPhoneNumber = ""
        sDate = ""
        sBillingStreet = ""
        sBillingCity = ""
        sBillingState = ""
        sBillingZipCode = ""
        sShippingStreet = ""
        sShippingCity = ""
        sShippingState = ""
        sShippingZipCode = ""
        sDeliveryOption = ""
        sError = ""
        detailsList = New ArrayList
    End Sub

    '===================================================
    ' Object properties setters / getters
    '===================================================

    Public Property ID()
        'get and set the order id
        Get
            Return sID
        End Get
        Set(ByVal value)

            'Validation at class level
            If isValidID(value) = True Then
                sID = Convert.ToInt32(value)
            End If
        End Set
    End Property

    Public Property CustomerName()
        'Get and set the customer name
        Get
            Return sCustomerName
        End Get
        Set(ByVal value)
            'Validate, you can also add a try/catch
            If isValidName(value) Then
                sCustomerName = value
            End If
        End Set
    End Property

    Public Property PhoneNumber()
        'Get and set the phone number
        Get
            Return sPhoneNumber
        End Get
        Set(ByVal value)
            'Validate, you can add a try/catch
            If isValidPhoneNumber(value) Then
                sPhoneNumber = value
            End If
        End Set
    End Property

    Public Property aDate()
        'Get and set the date
        Get
            Return sDate
        End Get
        Set(value)
            'Validate
            If isValidDate(value) Then
                sDate = value
            End If
        End Set
    End Property

    Public Property BillingStreet()
        'Get and set the billing street
        Get
            Return sBillingStreet
        End Get
        Set(value)
            'Validate
            If isValidStreet(value) Then
                sBillingStreet = value
            End If
        End Set
    End Property

    Public Property BillingCity()
        'Get and set billing city
        Get
            Return sBillingCity
        End Get
        Set(value)
            'Validate
            If isValidCity(value) Then
                sBillingCity = value
            End If
        End Set
    End Property

    Public Property BillingState()
        'Get and set billing state
        Get
            Return sBillingState
        End Get
        Set(value)
            'Validate
            If isValidState(value) Then
                sBillingState = value
            End If
        End Set
    End Property

    Public Property BillingZipCode()
        'Get and set billing zipcode
        Get
            Return sBillingZipCode
        End Get
        Set(value)
            'Validate
            If isValidZipCode(value) Then
                sBillingZipCode = value
            End If
        End Set
    End Property

    Public Property ShippingStreet()
        'Get and set the shipping street
        Get
            Return sShippingStreet
        End Get
        Set(value)
            'Validate
            If isValidStreet(value) Then
                sShippingStreet = value
            End If
        End Set
    End Property

    Public Property ShippingCity()
        'Get and set shipping city
        Get
            Return sShippingCity
        End Get
        Set(value)
            'Validate
            If isValidCity(value) Then
                sShippingCity = value
            End If
        End Set
    End Property

    Public Property ShippingState()
        'Get and set shipping state
        Get
            Return sShippingState
        End Get
        Set(value)
            'Validate
            If isValidState(value) Then
                sShippingState = value
            End If
        End Set
    End Property

    Public Property ShippingZipCode()
        'Get and set shipping zipcode
        Get
            Return sShippingZipCode
        End Get
        Set(value)
            'Validate
            If isValidZipCode(value) Then
                sShippingZipCode = value
            End If
        End Set
    End Property

    Public Property DeliveryOption()
        'Get and set delivery option
        Get
            Return sDeliveryOption
        End Get
        Set(value)
            'Validate
            If isValidDeliveryOption(value) Then
                sDeliveryOption = value
            End If
        End Set
    End Property

    Public Property clsOrderDetail As clsOrderDetail
        Get
            Return Nothing
        End Get
        Set(value As clsOrderDetail)
        End Set
    End Property

    '===================================================
    ' Helper routines
    '===================================================

    Public Sub AddDetail(ByVal aDetailsList As ArrayList)
        'Sub that adds/saves an arraylist of details from an order
        'Loop through all our arraylist of details
        For i As Integer = 0 To aDetailsList.Count - 1
            'get a single order detail line out of 
            'the ArrayList of orders details
            Dim arrItem As String() = aDetailsList(i)

            'create a new order detail object
            Dim myOrderDetail As New clsOrderDetail

            'Add detail info to our object
            ' 0 - detail line
            ' 1 - Item Description
            ' 2 - Item Quantity
            ' 3 - Item Price

            myOrderDetail.line = arrItem(0)
            myOrderDetail.Item = arrItem(1)
            myOrderDetail.Qty = arrItem(2)
            myOrderDetail.Price = CDbl(arrItem(3))

            If myOrderDetail.getError = "" Then
                myOrderDetail.total()
            End If

            'Add the order to our collection
            'Check for errors in the detail
            'if no errors then add
            If myOrderDetail.getError = "" Then
                detailsList.Add(myOrderDetail)
            Else
                addError(myOrderDetail.getError)
            End If
        Next

        If detailsList.Count = 0 Then
            addError("Detail:Order must contain at least one valid detail line")
        End If
    End Sub

    Public Function getLineTotal(ByVal iLine As Integer) As Decimal
        'Returns line total
        'return the line total
        'Loop through all the order lines
        For i As Integer = 0 To detailsList.Count - 1

            Dim myOrderDetail As clsOrderDetail = CType(detailsList(i), clsOrderDetail)
            If myOrderDetail.line = iLine Then
                Return myOrderDetail.total
            End If
        Next
    End Function

    Public Function getSubTotal() As Decimal
        'Function that returns the subtotal for the  order
        Dim aSubTotal As Decimal

        For i As Integer = 0 To detailsList.Count - 1
            Dim anOrderDetail As clsOrderDetail = CType(detailsList(i), clsOrderDetail)
            aSubTotal += anOrderDetail.total
        Next

        Return aSubTotal
    End Function

    Public Function getTax() As Decimal
        'Function that returns tax for an order
        Dim aTotal As Decimal = getSubTotal()
        Dim tax As Decimal

        tax = aTotal * TAX_RATE

        Return tax
    End Function

    Public Function getTotal() As Decimal
        'return the total for the order
        Dim aTotal As Decimal
        For i As Integer = 0 To detailsList.Count - 1
            Dim anOrderDetail As clsOrderDetail = CType(detailsList(i), clsOrderDetail)
            aTotal += anOrderDetail.total
        Next

        aTotal += getTax()
        aTotal += getDeliveryFee()

        Return aTotal
    End Function

    Public Function getDeliveryFee() As Integer
        'Function that returns the delivery fee
        Dim aDeliveryFee As Integer

        If sDeliveryOption = "Pickup" Then
            aDeliveryFee = 0
        ElseIf sDeliveryOption = "Delivery +$10" Then
            aDeliveryFee = 10
        Else
            aDeliveryFee = 0
        End If

        Return aDeliveryFee
    End Function

    Private Sub addError(ByVal s As String)
        'private function to format our error message by
        'adding line breaks when necessary
        If sError = "" Then
            sError = s
        Else
            sError += vbCrLf & s
        End If
    End Sub

    '===================================================
    ' Public functions to access the detail lines
    ' and the error
    '===================================================

    Public Function GetDetail() As ArrayList
        'Retrieve a detail item from the order
        Dim detailItemsList As New ArrayList
        For i As Integer = 0 To detailsList.Count - 1
            Dim orderDetail As New clsOrderDetail
            orderDetail = detailsList.Item(i)

            Dim arrDetail(4) As String

            arrDetail(0) = orderDetail.line
            arrDetail(1) = orderDetail.Item
            arrDetail(2) = orderDetail.Qty
            arrDetail(3) = orderDetail.Price
            arrDetail(4) = orderDetail.total

            detailItemsList.Add(arrDetail)
        Next
        Return detailItemsList
    End Function

    Public Function getError()
        'public Function to return the error 
        'To other objects
        Return sError
    End Function

    '===================================================
    ' Validation routines
    '===================================================

    Private Function isValidID(ByVal s As String) As Boolean
        'Function that validates order number
        Dim bResult As Boolean
        Try
            If (s = "") Then
                addError("ID: Cannot be left blank")
                bResult = False
            Else
                Dim aNum As Integer = 0

                If (Integer.TryParse(s, aNum)) Then
                    If (aNum <= 0) Then
                        addError("ID: Cannot be 0 or less")
                        bResult = False
                    ElseIf (isValidMod(aNum) <> True) Then
                        addError("ID: Must be an increment of 100 (Ex. 100, 200, 300)")
                        bResult = False
                    Else
                        bResult = True
                    End If
                Else
                    addError("ID: Invalid format, must enter valid integers")
                    bResult = False
                End If

            End If
        Catch ex As Exception
            addError("ID: Invalid ID (" & ex.Message & ")")
            bResult = False
        End Try

        Return bResult
    End Function

    Private Function isValidMod(ByVal i As Integer) As Boolean
        'Function that validates if an order number is an increment of 100
        Dim remainder As Boolean
        Dim value As Integer

        value = i Mod 100

        If (value = 0) Then
            remainder = True
        Else
            remainder = False
        End If

        Return remainder
    End Function

    Private Function isValidName(ByVal s As String) As Boolean
        'Function that validates name
        Dim bResult As Boolean
        Try
            If (s <> "") Then
                bResult = True
            Else
                addError("Name: Invalid Customer Name")
                bResult = False
            End If
        Catch ex As Exception
            addError("Name: Invalid Customer Name (" & ex.Message & ")")
            bResult = False
        End Try

        Return bResult
    End Function

    Private Function isValidPhoneNumber(ByVal s As String) As Boolean
        'Function that validates phone number
        Dim brResult As Boolean
        'Creates a format that must be met for phone number
        Dim phoneNumber As New Regex("\(\d{3}\)\d{3}-\d{4}")

        Try
            If s = "" Then
                addError("Phone Number: Invalid Phone Number. Phone number cannot be blank.(I.e. (909)123-4567)")
                brResult = False
            ElseIf phoneNumber.IsMatch(s) = False Then
                addError("Phone Number: Invalid Phone Number. Phone number must bet 10 integers with the appropiate format.(I.e. (909)123-4567)")
                brResult = False
            ElseIf phoneNumber.IsMatch(s) Then
                brResult = True
            End If
        Catch ex As Exception
            addError("Phone Number: Invalid Phone Number. Phone number must only contain integers.")
            brResult = False
        End Try

        Return brResult
    End Function

    Private Function isValidDate(ByVal s As String) As Boolean
        'Function that validates date
        Dim brResult As Boolean

        Try
            If (s.Length = 0) Then
                addError("Date: Invalid Date, date cannot be left blank")
                brResult = False
            Else
                Dim aDate As Date

                If (Date.TryParse(s, aDate) = True) Then
                    brResult = True
                Else
                    addError("Date: Invalid date, please enter valid date")
                End If
            End If
        Catch ex As Exception
            addError("Date: Date (" & ex.Message & ")")
            brResult = False
        End Try

        Return brResult
    End Function

    Private Function isValidStreet(ByVal s As String) As Boolean
        'Function that validates billing and shipping street
        Dim bResult As Boolean

        Try
            If (s <> "") Then
                bResult = True
            Else
                addError("Street: Invalid Street Address, cannot be blank")
                bResult = False
            End If
        Catch ex As Exception
            addError("Street: Invalid Street Address (" & ex.Message & ")")
            bResult = False
        End Try

        Return bResult
    End Function

    Private Function isValidCity(ByVal s As String) As Boolean
        'Function that validates billing and shipping city
        Dim bResult As Boolean

        Try
            If (s <> "") Then
                bResult = True
            Else
                addError("City: Invalid City, cannot be blank")
                bResult = False
            End If
        Catch ex As Exception
            addError("City: Invalid City (" & ex.Message & ")")
            bResult = False
        End Try

        Return bResult
    End Function

    Private Function isValidState(ByVal s As String) As Boolean
        'Function that validates billing and shipping state
        Dim bResult As Boolean

        Try
            If (s <> "") Then
                bResult = True
            Else
                addError("State: Invalid State, cannot be blank")
                bResult = False
            End If
        Catch ex As Exception
            addError("State: Invalid State (" & ex.Message & ")")
            bResult = False
        End Try

        Return bResult
    End Function


    Private Function isValidZipCode(ByVal s As String) As Boolean
        'Function that validates billing and shipping zipcode
        Dim brResult As Boolean

        Try
            If (s.Length = 5 And CInt(s)) Then
                brResult = True
            Else
                addError("Zipcode: Invalid Zipcode. Phone Number must be 7 digits")
                brResult = False
            End If
        Catch ex As Exception
            addError("Zipcode: Invalid Zipcode. Phone number must only contain integers.")
            brResult = False
        End Try

        Return brResult
    End Function

    Private Function isValidDeliveryOption(ByVal s As String) As Boolean
        'Function that validates delivery option
        Dim bResult As Boolean

        Try
            If (s <> "") Then
                bResult = True
            Else
                addError("Delivery Option: You must select a delivery option")
                bResult = False
            End If
        Catch ex As Exception
            addError("Delivery Option: Invalid Delivery Option (" & ex.Message & ")")
            bResult = False
        End Try

        Return bResult
    End Function
End Class
